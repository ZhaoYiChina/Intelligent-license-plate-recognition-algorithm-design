
# -*- coding: utf-8 -*-
__author__ = '赵毅'
import threading
import time
import tkinter as tk
import cv2
import config
import debug
import img_function as predict
import img_math
from threading import Thread
from tkinter import ttk
from tkinter.filedialog import *
from PIL import Image, ImageTk
import matplotlib.pyplot as plt

class ThreadWithReturnValue(Thread):
    def __init__(self, group=None, target=None, name=None, args=(), kwargs=None, *, daemon=None):
        Thread.__init__(self, group, target, name, args, kwargs, daemon=daemon)
        self._return1 = None
        self._return2 = None
        self._return3 = None

    def run(self):
        if self._target is not None:
            self._return1, self._return2, self._return3 = self._target(*self._args, **self._kwargs)

    def join(self):
        Thread.join(self)
        return self._return1, self._return2, self._return3

class Surface(ttk.Frame):
    pic_path = ""
    viewhigh = 600
    viewwide = 600
    update_time = 0
    thread = None
    thread_run = False
    camera = None
    color_transform = {"green": ("绿牌", "#55FF55"), "yello": ("黄牌", "#FFFF00"), "blue": ("蓝牌", "#6666FF")}

def __init__(self, win):

    #初始化主窗口，创建三个子框架，为矩形，作为容器使用
    ttk.Frame.__init__(self, win)
    frame_left = ttk.Frame(self)
    frame_right1 = ttk.Frame(self)
    frame_right2 = ttk.Frame(self)

    #设置主窗口名称、状态、大小
    win.title("智能车牌识别系统")
    win.state("zoomed")
    win.geometry("800x600")
    #设置主窗口属性
    #fill的值表示当主窗口变化时，子框架随之变化的维度，x,y方向或同时变化
    #expand为1，使用fill属性，反之不使用；padx,pady为组件外与父框架（主窗口边界）的间隔
    self.pack(fill=tk.BOTH, expand=tk.YES, padx="50", pady="20")
    #将三个子框架包装到主窗口内，位置：左，右上，右下
    #子框架分别为原图展示区、识别区、选择区
    #side含义为填充父组件的区域，left/right为左右方向，top/bottom为上下方向
    #先定义的框架填充父组件的整体，后定义的在剩余空间的方向上填充
    frame_left.pack(side=LEFT, expand=1, fill=BOTH)
    frame_right1.pack(side=TOP, expand=1, fill=tk.Y)
    frame_right2.pack(side=RIGHT, expand=1, fill=tk.Y)

    #图片选择及预处理展示
    #Labe为标签控件，可显示文字和位图（固定位置的图片）
    #下一行语句表示在frame的西北方（左上）定义一个标签
    ttk.Label(frame_left, text='原图：').pack(anchor="nw")
    #定义Button控件，在frame_right2（容器）内部；
    #该控件点击后，执行self.from_pic选择图片及之后对图片的操作，并返回选择的图像from_pic_ctl
    from_pic_ctl = ttk.Button(frame_right2, text="来自图片", width=20, command=self.from_pic)
    #定义Button控件，在frame_right2（容器）内部；
    #该控件点击后，调用self.show_img_pre展示预处理后的图像，并返回处理后的图像from_img_pre
    from_img_pre = ttk.Button(frame_right2, text="查看形状预处理图像",width=20, command=self.show_img_pre)
    #包装该控件，定义位置和间距（上下方向上）
    from_pic_ctl.pack(anchor="se", pady="5")
    from_img_pre.pack(anchor="se", pady="5")
    
    #在生成一个新的标签空间，放置需要识别的车牌原图；并包装其于父框架左上方
    self.image_ctl = ttk.Label(frame_left)
    self.image_ctl.pack(anchor="nw")

    #形状定位框图配置和结果展示
    #定义第1个label，显示文字
    #ttk.Label(frame_right1, text='形状定位车牌位置：').grid(column=0, row=0, sticky=tk.W)
    #定义第2个label，显示车牌定位结果；并将其网格化，位置为西（左）
    #self.roi_ctl = ttk.Label(frame_right1)
    #self.roi_ctl.grid(column=0, row=1, sticky=tk.W)
    
    #形状定位识别框图配置和结果展示
    #定义第3个label，并设置行高为2，显示文字
    #ttk.Label(frame_right1, text='形状定位识别结果及车牌颜色：').grid(column=0, row=2, sticky=tk.W)
    #定义第4个label，之后显示图片结果，设置字体及其大小，之后设置行高为3，column列宽，row行高
    #color="#FFC0CB"
    #self.r_ctl = ttk.Label(frame_right1, textvariable="", font=('Times', '20'))
    #self.r_ctl.grid(column=0, row=3, sticky=tk.W)
    #定义第5个label，显示文字（车牌底色）
    #self.color_ctl = ttk.Label(frame_right1, textvariable="", font=('Times', '20'))
    #self.color_ctl.grid(column=0, row=4, sticky=tk.W)

    ttk.Label(frame_right1, text='车牌定位结果：').grid(column=0, row=5, sticky=tk.W)
    self.roi_ct2 = ttk.Label(frame_right1)
    self.roi_ct2.grid(column=0, row=6, sticky=tk.W)
    
    #形状定位识别框图配置和结果展示
    ttk.Label(frame_right1, text='车牌字符识别及车牌颜色识别结果：').grid(column=0, row=7, sticky=tk.W)
    self.r_ct2 = ttk.Label(frame_right1, textvariable="", font=('Times', '20'))
    self.r_ct2.grid(column=0, row=8, sticky=tk.W)
    self.color_ct2 = ttk.Label(frame_right1, textvariable="", font=('Times', '20'))
    self.color_ct2.grid(column=0, row=9, sticky=tk.W)

    #调用predict包（img_function）的CardPredicotr类及其train_svm函数
    self.predictor = predict.CardPredictor()
    self.predictor.train_svm()
    
#车牌图形处理全过程
def from_pic(self):
    self.thread_run = False
    self.pic_path = askopenfilename(title="选择识别图片", filetypes=[("jpg图片", "*.jpg"), ("png图片", "*.png")])
    if self.pic_path:
        img_bgr = img_math.img_read(self.pic_path)
        first_img, oldimg = self.predictor.img_first_pre(img_bgr)
        #以下两行程序用于展示车牌原图像
        self.imgtk = self.get_imgtk(img_bgr)
        self.image_ctl.configure(image=self.imgtk)
        #以下6行，用于两个线程分别进行形状定位识别和颜色定位识别
        th1 = ThreadWithReturnValue(target=self.predictor.img_color_contours, args=(first_img, oldimg))
        th2 = ThreadWithReturnValue(target=self.predictor.img_only_color, args=(oldimg, oldimg))
        th1.start()
        th2.start()
        r_c, roi_c, color_c = th1.join()
        r_color, roi_color, color_color = th2.join()
        print("智能车牌识别系统结果展示")
        print(r_color, color_color)
        #self.show_roi1(r_c, roi_c, color_c)
        self.show_roi2(r_color, roi_color, color_color)

#被from_pic调用
def get_imgtk(self, img_bgr):
    img = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2RGB)
    im = Image.fromarray(img)
    imgtk = ImageTk.PhotoImage(image=im)
    wide = imgtk.width()
    high = imgtk.height()
    if wide > self.viewwide or high > self.viewhigh:
        wide_factor = self.viewwide / wide
        high_factor = self.viewhigh / high
        factor = min(wide_factor, high_factor)
        wide = int(wide * factor)
        if wide <= 0: wide = 1
        high = int(high * factor)
        if high <= 0: high = 1
        im = im.resize((wide, high), Image.ANTIALIAS)
        imgtk = ImageTk.PhotoImage(image=im)
    return imgtk
#被from_pic调用，用于显示形状定位车牌位置  

def show_roi1(self, r, roi, color):
    if r:
        roi = cv2.cvtColor(roi, cv2.COLOR_BGR2RGB)
        roi = Image.fromarray(roi)
        self.imgtk_roi = ImageTk.PhotoImage(image=roi)
        self.roi_ctl.configure(image=self.imgtk_roi, state='enable')
        self.r_ctl.configure(text=str(r))
        self.update_time = time.time()
        try:
            c = self.color_transform[color]
            self.color_ctl.configure(text=c[0], background=c[1], state='enable')
        except:
            self.color_ctl.configure(state='disabled')
    elif self.update_time + 8 < time.time():

        self.roi_ctl.configure(state='disabled')
        self.r_ctl.configure(text="")
        self.color_ctl.configure(state='disabled')

def show_roi2(self, r, roi, color):
    if r:
        roi = cv2.cvtColor(roi, cv2.COLOR_BGR2RGB)
        roi = Image.fromarray(roi)
        self.imgtk_roi = ImageTk.PhotoImage(image=roi)
        self.roi_ct2.configure(image=self.imgtk_roi, state='enable')
        self.r_ct2.configure(text=str(r))
        self.update_time = time.time()
        try:
            c = self.color_transform[color]
            self.color_ct2.configure(text=c[0], background=c[1], state='enable')
        except:
            self.color_ct2.configure(state='disabled')
    elif self.update_time + 8 < time.time():
        self.roi_ct2.configure(state='disabled')
        self.r_ct2.configure(text="")
        self.color_ct2.configure(state='disabled')
#Button调用，显示预处理图片
def show_img_pre(self):
    filename = config.get_name()
    if filename.any():
        debug.img_show(filename)

def close_window():
    print("destroy")
    if surface.thread_run:
        surface.thread_run = False
        surface.thread.join(2.0)
    win.destroy()

if __name__ == '__main__':
    win = tk.Tk()
    surface = Surface(win)
    # close,退出输出destroy
    win.protocol('WM_DELETE_WINDOW', close_window)
    # 进入消息循环
    win.mainloop()
